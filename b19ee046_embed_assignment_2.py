# -*- coding: utf-8 -*-
"""B19EE046_Embed_Assignment_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CgOAqpfOemeJU2w9VSTWZznoVPuySP22
"""

from time import sleep

def num_to_binary(num, array):
  y = [int(x) for x in bin(num)[2:]]
  for idx in range(0, len(array)-len(y)):
    array[idx]=0
  for idx_2 in range(len(array)-len(y),len(array)):
    array[idx_2]=y[idx_2-(len(array)-len(y))]
  return array

def binary_to_num(array):
  sum=0
  for i in range(0,len(array)):
    sum+=(2**(len(array)-i-1))*array[i]
  return sum

def write_transfer_no_wait(total, unit, address, data, p_addr, addr_enable, p_sel, p_wdata, wdata_enable, p_enable = False , p_write=False, p_ready = False):
  count=-1
  prev=False
  curr=False
  for i in range(0,total+1):
    print("At t="+str(i)+" time-unit, "+"PCLK="+str(curr)+" | "+"PWRITE="+str(p_write)+" | "+"PSEL="+str(p_sel)+" | "+"PENABLE="+str(p_enable)+" | "+"PREADY="+str(p_ready)+" | ")
    sleep(1)
    if i%unit==0:
      curr = not curr
      count+=1
    prev=curr
    if count==2:
      p_write = True
      p_sel = True
      p_enable = False
      addr_enable= not addr_enable
      wdata_enable = not wdata_enable
    if count==4:
      p_enable = not p_enable
      p_ready = True
    if count==6:
      p_write = not p_write
      p_sel = not p_sel
      p_enable = not p_enable
      p_ready = not p_ready
      addr_enable= not addr_enable
      wdata_enable = not wdata_enable
    if addr_enable==True and wdata_enable == True and i==int(total/4):
      print("\n It's Time to write the data without wait state")
      print("\nAddress before switch-on :- "+str(p_addr))
      p_addr = num_to_binary(address,p_addr)
      print("Address after switch-on :- "+str(p_addr))
      print("\nData before switch-on :- "+str(data))
      p_wdata = num_to_binary(data,p_wdata)
      print("Data after switch-on :- "+str(p_wdata)+'\n')

def read_transfer_no_wait(total, unit, address, data, p_addr, addr_enable, p_sel, p_rdata, rdata_enable, p_enable = False , p_write=False, p_ready = False):
  count=-1
  prev=False
  curr=False
  swit=0
  for i in range(0,total+1):
    print("At t="+str(i)+" time-unit, "+"PCLK="+str(curr)+" | "+"PWRITE="+str(p_write)+" | "+"PSEL="+str(p_sel)+" | "+"PENABLE="+str(p_enable)+" | "+"PREADY="+str(p_ready)+" | ")
    sleep(1)
    if i%unit==0:
      curr = not curr
      count+=1
    prev=curr
    if count==2:
      p_write = False
      p_sel = True
      p_enable = False
      addr_enable= True
    if count==4 and swit==0:
      p_enable = not p_enable
      p_ready = True
      rdata_enable = True
      swit=1
    if count==6:
      p_write = not p_write
      p_sel = not p_sel
      p_enable = not p_enable
      p_ready = not p_ready
      addr_enable= not addr_enable
      rdata_enable = not rdata_enable
    if addr_enable==True and i==total/4:
      print("\n It's Time to read the address without wait state")
      print("\nAddress before switch-on :- "+str(address))
      p_addr = binary_to_num(address)
      print("Address after switch-on :- "+str(p_addr)+'\n')
    if addr_enable==True and rdata_enable==True and swit==1:
      print("\n It's Time to read the data without wait state")
      print("\nData before switch-on :- "+str(data))
      p_rdata = binary_to_num(data)
      print("Data after switch-on :- "+str(p_rdata)+'\n')
      swit=2

def main_implementation():
  P_addr = [int(0)]*32
  addr_enable = False
  P_write = False
  P_sel = False
  P_enable = False
  P_wdata = [int(0)]*32
  P_ready = False
  wdata_enable = False
  total_time = int(input("Enter the Total Simulation Time :-"))
  menu_choice = int(input("Enter the Mode of Transfer amongst :-\n 1.) Write Transfer without wait\n 2.) Read Transfer without wait\n"))
  if menu_choice==1:
    address = int(input("Enter the Address where data should be written (Expressible within 32 bits) :-"))
    data = int(input("Enter the numeric data to be written (Expressible within 32 bits :-"))
    time_unit=total_time/8
    write_transfer_no_wait(total_time, time_unit, address, data, P_addr, addr_enable, P_sel, P_wdata, wdata_enable, P_enable, P_write, P_ready)
  if menu_choice==2:
    address = int(input("Enter the Address where data should be read (Expressible within 32 bits) :-"))
    data = int(input("Enter the numeric data to be read (Expressible within 32 bits :-"))
    address = num_to_binary(address, P_wdata)
    P_wdata = [int(0)]*32
    data = num_to_binary(data, P_wdata)
    P_wdata = [int(0)]*32
    time_unit=total_time/12
    read_transfer_no_wait(total_time, time_unit, address, data, P_addr, addr_enable, P_sel, P_wdata, wdata_enable, P_enable, P_write, P_ready)

main_implementation()

main_implementation()